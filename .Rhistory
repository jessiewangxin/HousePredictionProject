summary(tree.carseats)
tree.carseats
#Tree
tree.one = tree(SalePrice ~ . , data = data_use[num_columns])
summary(tree.one)
plot(tree.one)
text(tree.one, pretty = 0)
library(randomForest)
install.packages('randomForest')
install.packages("randomForest")
library(randomForest)
library(randomForest)
summary(full_linear_model)
knitr::opts_chunk$set(echo = TRUE, warning = FALSE, message = FALSE)
# Your code here
library(ggplot2)
library(dplyr)
orders <- read.csv("data/Orders.csv", header = T, stringsAsFactors = F)
orders <- read.csv("data/Orders.csv", header = T, stringsAsFactors = F)
number.cleaner <- function(x){
word <- unlist(strsplit(x, split='$', fixed=TRUE))
word <- paste0(word[1], word[2])
word <- as.numeric(gsub(",", "", word)) # can also use gsub for the $ sign
}
orders$Sales <- sapply(orders$Sales, number.cleaner)
orders$Sales <- sapply(orders$Sales, number.cleaner)
# Your code here
library(ggplot2)
library(dplyr)
orders <- read.csv("data/Orders.csv", header = T, stringsAsFactors = F)
number.cleaner <- function(x){
word <- unlist(strsplit(x, split='$', fixed=TRUE))
word <- paste0(word[1], word[2])
word <- as.numeric(gsub(",", "", word)) # can also use gsub for the $ sign
}
orders$Sales <- sapply(orders$Sales, number.cleaner)
orders$Profit <- sapply(orders$Profit, number.cleaner)
# Your code here
library(lubridate)
orders$Order.Date <- as.Date(orders$Order.Date,"%m/%d/%y")
orders$Order.Month <- month(orders$Order.Date)
View(orders)
daily <- orders %>%
group_by(Order.Date) %>%
summarise( daily_quantity=sum(Quantity))
ggplot(daily, aes(Order.Date, daily_quantity)) +
geom_line() +
xlab("Time") +
ylab("Daily Orders Sales") +
theme_bw() +
geom_smooth()
View(data_use)
View(data_use)
ggplot(data_use, aes(x=YearBuilt, y=SalePrice)) +
geom_line() +
xlab("Time") +
ylab("SalePrice") +
theme_bw() +
geom_smooth()
View(data_use)
ggplot(data_use, aes(x=YearRemodAdd, y=SalePrice)) +
geom_line() +
xlab("Time") +
ylab("SalePrice") +
theme_bw() +
geom_smooth()
ggplot(data_use, aes(x=YearBuilt, y=SalePrice)) +
geom_line() +
xlab("Time") +
ylab("SalePrice") +
theme_bw() +
geom_smooth()
View(data_use)
ggplot(data_use, aes(x=GarageYrBlt, y=SalePrice)) +
geom_line() +
xlab("Time") +
ylab("SalePrice") +
theme_bw() +
geom_smooth()
hist(data_use$SalePrice, breaks=12, col="red")
hist(data_use$SalePrice, breaks=20, col="red")
hist(data_use$SalePrice, breaks=20, col="red")
hist(data_use$SalePrice, breaks=50, col="red")
d <- density(data_use$SalePrice) # returns the density data
plot(d)
h<-hist(data_use$SalePrice, breaks=50, col="red")
d <- density(data_use$SalePrice) # returns the density data
plot(d,h)
hist(data_use$SalePrice, breaks=50, col="red")
hist(data_use$SalePrice, breaks=50, col="red") + plot(d)
hist(data_use$SalePrice, breaks=50, col="red")
hist(log(data_use$SalePrice), breaks=50, col="red")
hist(data_use$SalePrice, breaks=50, col="red")
hist(data_use$SalePrice, breaks=50, col="red")
hist(log(data_use$SalePrice), breaks=50, col="red")
hist(data_use$SalePrice, breaks=50, col="red")
hist(log(data_use$SalePrice), breaks=50, col="red")
hist(data_use$SalePrice, breaks=50, col="red")
hist(log(data_use$SalePrice), breaks=50, col="red")
hist(data_use$SalePrice, breaks=50, col="red")
hist(data_use$SalePrice, breaks=50, col="light green")
hist(log(data_use$SalePrice), breaks=50, col="light green")
hist(log(data_use$SalePrice), breaks=50, col="#66ffcc")
hist(data_use$SalePrice, breaks=50, col="#66ffcc")
gg <- ggplot(data_use, aes(x=log(SalePrice)))
gg
gg <- ggplot(data_use, aes(x=log(SalePrice))) + geom_histogram(binwidth=2, colour="black",
aes(y=..density.., fill=..count..))
gg
gg <- ggplot(data_use, aes(x=log(SalePrice))) + geom_histogram(binwidth=50, colour="black",
aes(y=..density.., fill=..count..))
gg <- gg + scale_fill_gradient("Count", low="#DCDCDC", high="#7C7C7C")
gg <- gg + stat_function(fun=dnorm,
color="red",
args=list(mean=mean(mtcars$mpg),
sd=sd(mtcars$mpg)))
gg
gg <- ggplot(data_use, aes(x=log(SalePrice))) + geom_histogram(binwidth=.2, colour="black",
aes(y=..density.., fill=..count..))
gg
gg <- gg + scale_fill_gradient("Count", low="#66ffcc", high="#7C7C7C")
gg <- ggplot(data_use, aes(x=log(SalePrice))) + geom_histogram(binwidth=.2, colour="black",
aes(y=..density.., fill=..count..)) +
scale_fill_gradient("Count", low="#66ffcc", high="#7C7C7C") +
stat_function(fun=dnorm, color="red", args=list(mean=mean(log(SalePrice)), sd=sd(log(SalePrice))))
gg
gg <- ggplot(data_use, aes(x=log(SalePrice))) + geom_histogram(binwidth=.2, colour="black",
aes(y=..density.., fill=..count..)) +
scale_fill_gradient("Count", low="#66ffcc", high="#09836D") +
stat_function(fun=dnorm, color="red", args=list(mean=mean(log(SalePrice)), sd=sd(log(SalePrice))))
gg
gg <- ggplot(data_use, aes(x=log(SalePrice))) +
geom_histogram(binwidth=.2, colour="#66ffcc") +
stat_function(fun=dnorm, color="red", args=list(mean=mean(log(SalePrice)), sd=sd(log(SalePrice))))
gg <- ggplot(data_use, aes(x=log(SalePrice))) +
geom_histogram(binwidth=.2, colour="#66ffcc")
gg
gg <- ggplot(data_use, aes(x=log(SalePrice))) +
geom_histogram(binwidth=.2, fill="#66ffcc")
gg
gg <- ggplot(data_use, aes(x=log(SalePrice))) +
geom_histogram(binwidth=.2, fill="#66ffcc") +
theme_bw()
gg
gg <- ggplot(data_use, aes(x=log(SalePrice))) +
geom_histogram(binwidth=.05, fill="#66ffcc") +
theme_bw()
gg
gg <- ggplot(data_use, aes(x=log(SalePrice))) +
geom_histogram(binwidth=.1, fill="#66ffcc") +
theme_bw()
gg
gg <- ggplot(data_use, aes(x=log(SalePrice))) +
geom_histogram(binwidth=.025, fill="#66ffcc") +
theme_bw()
gg
g
glog <- ggplot(data_use, aes(x=log(SalePrice))) +
geom_histogram(binwidth=.025, fill="#66ffcc") +
theme_bw()
g <- ggplot(data_use, aes(x=SalePrice)) +
geom_histogram(binwidth=.025, fill="#66ffcc") +
theme_bw()
g
glog <- ggplot(data_use, aes(x=log(SalePrice))) +
geom_histogram(binwidth=.025, fill="#66ffcc") +
theme_bw()
glog
g
g <- ggplot(data_use, aes(x=SalePrice)) +
geom_histogram(binwidth=.05, fill="#66ffcc") +
theme_bw()
g
g <- ggplot(data_use, aes(x=SalePrice)) +
geom_histogram(binwidth=.5, fill="#66ffcc") +
theme_bw()
g
g <- ggplot(data_use, aes(x=SalePrice)) +
geom_histogram(binwidth=50, fill="#66ffcc") +
theme_bw()
g
glog <- ggplot(data_use, aes(x=log(SalePrice))) +
geom_histogram(binwidth=.025, fill="#66ffcc") +
theme_bw()
source('~/Desktop/HousePredictionProject/HousingPredictionProjectCode Scratch.R', echo=TRUE)
glog <- ggplot(data_use, aes(x=log(SalePrice))) +
geom_histogram(binwidth=.025, fill="#66ffcc") +
theme_bw()
glog
?geom_histogram
g <- ggplot(data_use, aes(x=SalePrice)) +
geom_histogram(bins=200, fill="#66ffcc") +
theme_bw()
g
glog <- ggplot(data_use, aes(x=log(SalePrice))) +
geom_histogram(bins=200, fill="#66ffcc") +
theme_bw()
glog <- ggplot(data_use, aes(x=log(SalePrice))) +
geom_histogram(bins=200, fill="#66ffcc") +
theme_bw()
glog
glog <- ggplot(data_use, aes(x=log(SalePrice))) +
geom_histogram(bins=200, fill="#66ffcc") +
xlab('Log of Sale Price') +
ylab('') +
theme_bw()
glog
g <- ggplot(data_use, aes(x=SalePrice)) +
geom_histogram(bins=200, fill="#66ffcc") +
xlab('Sale Price') +
ylab('') +
theme_bw()
g
glog <- ggplot(data_use, aes(x=log(SalePrice))) +
geom_histogram(bins=200, fill="#66ffcc") +
xlab('Log of Sale Price') +
ylab('') +
theme_bw()
glog
g <- ggplot(data_use, aes(x=SalePrice)) +
geom_histogram(bins=200, fill="#66ffcc") +
xlab('Sale Price') +
ylab('') +
theme_classic()
g
glog <- ggplot(data_use, aes(x=log(SalePrice))) +
geom_histogram(bins=200, fill="#66ffcc") +
xlab('Log of Sale Price') +
ylab('') +
theme_bw()
glog
glog <- ggplot(data_use, aes(x=log(SalePrice))) +
geom_histogram(bins=200, fill="#66ffcc") +
xlab('Log of Sale Price') +
ylab('') +
theme_classic()
glog
glog <- ggplot(data_use, aes(x=log(SalePrice))) +
geom_histogram(bins=200, fill="#66ffcc") +
xlab('Log of Sale Price') +
ylab('') +
theme_classic() +
stat_function(fun=dnorm,
color="black",
args=list(mean=mean(log(data_use$SalePrice)),
sd=sd(log(data_use$SalePrice))))
glog
g <- ggplot(data_use, aes(x=SalePrice)) +
geom_histogram(bins=200, fill="#66ffcc") +
xlab('Sale Price') +
ylab('') +
theme_classic() +
stat_function(fun=dnorm,
color="black",
args=list(mean=mean(data_use$SalePrice),
sd=sd(data_use$SalePrice)))
g
glog <- ggplot(data_use, aes(x=log(SalePrice))) +
geom_histogram(bins=200, fill="#66ffcc") +
xlab('Log of Sale Price') +
ylab('') +
theme_classic() +
stat_function(fun=dnorm,
color="black",
args=list(mean=mean(log(data_use$SalePrice)),
sd=sd(log(data_use$SalePrice))))
glog
log(data_use$SalePrice)
data_use$LogSalePrice <- log(data_use$SalePrice)
#Tree
tree.one = tree(LogSalePrice ~ . , data = data_use[num_columns])
summary(tree.one)
plot(tree.one)
text(tree.one, pretty = 0)
#simple linear model
num_columns = c('LotFrontage', 'MasVnrArea', 'LotArea', 'BsmtFinSF2', 'BsmtUnfSF', 'TotalBsmtSF',
'X1stFlrSF', 'X2ndFlrSF', 'LowQualFinSF', 'GrLivArea', 'BsmtFullBath', 'BsmtHalfBath',
'FullBath', 'HalfBath', 'BedroomAbvGr', 'KitchenAbvGr', 'TotRmsAbvGrd', 'Fireplaces',
'GarageCars', 'GarageArea', 'TotalPorchSF', 'PoolArea', 'MiscVal','SalePrice')
full_linear_model = lm(SalePrice  ~ ., data_use[num_columns])
#MISSING VALUES
#checking missing values
missing_df <- data.frame(colname = names(data_use),colSums_missing=colSums(is.na(data_use)))
#19 columns with missing values
plot_missing = missing_df %>% filter(colSums_missing!=0) %>% arrange(desc(colSums_missing))
ggplot(plot_missing, aes(x = reorder(colname,colSums_missing), y = colSums_missing)) +
geom_col(aes(fill = colname), width = 0.7) +
coord_flip() +
theme_classic() +
theme(legend.position = "none") +
xlab("") +
ylab("Number of Missing Observations")
#PoolQ - NA means no pool
#Pool Quality
data_use$PoolQC<-ifelse(is.na(data_use$PoolQC),'NoPool',data_use$PoolQC)
unique(data_use$PoolQC)
#MiscFeature - NA means None
#Miscellaneous Feature
data_use$MiscFeature<-ifelse(is.na(data_use$MiscFeature),'None',data_use$MiscFeature)
unique(data_use$MiscFeature)
#Alley - NA means No Alley Access
data_use$Alley<-ifelse(is.na(data_use$Alley),'NoAlley',data_use$Alley)
unique(data_use$Alley)
#Fence - NA means No Fence
data_use$Fence<-ifelse(is.na(data_use$Fence),'NoFence',data_use$Fence)
unique(data_use$Fence)
#FireplaceQu - NA means No Fireplace
data_use$FireplaceQu <- ifelse(is.na(data_use$FireplaceQu),'NoFireplace',data_use$FireplaceQu)
unique(data_use$FireplaceQu)
#NA means No Garage ####NOT SURE IF THIS IS THE BEST!!!!
data_use$GarageYrBlt <- ifelse(is.na(data_use$GarageYrBlt),0,data_use$GarageYrBlt)
unique(data_use$GarageYrBlt)
#NA means No Garage
data_use$GarageType <- ifelse(is.na(data_use$GarageType),'NoGarage',data_use$GarageType)
unique(data_use$GarageType)
data_use$GarageQual <- ifelse(is.na(data_use$GarageQual),'NoGarage',data_use$GarageQual)
unique(data_use$GarageQual)
data_use$GarageFinish <- ifelse(is.na(data_use$GarageFinish),'NoGarage',data_use$GarageFinish)
unique(data_use$GarageFinish)
data_use$GarageCond <- ifelse(is.na(data_use$GarageCond),'NoGarage',data_use$GarageCond)
unique(data_use$GarageCond)
#NA means No Basement
data_use$BsmtFinType2 <- ifelse(is.na(data_use$BsmtFinType2),'NoBasement',data_use$BsmtFinType2)
unique(data_use$BsmtFinType2)
data_use$BsmtExposure <- ifelse(is.na(data_use$BsmtExposure),'NoBasement',data_use$BsmtExposure)
unique(data_use$BsmtExposure)
data_use$BsmtQual <- ifelse(is.na(data_use$BsmtQual),'NoBasement',data_use$BsmtQual)
unique(data_use$BsmtQual)
data_use$BsmtExposure <- ifelse(is.na(data_use$BsmtExposure),'NoBasement',data_use$BsmtExposure)
unique(data_use$BsmtExposure)
data_use$BsmtFinType1 <- ifelse(is.na(data_use$BsmtFinType1),'NoBasement',data_use$BsmtFinType1)
unique(data_use$BsmtFinType1)
data_use$BsmtCond <- ifelse(is.na(data_use$BsmtCond),'NoBasement',data_use$BsmtCond)
unique(data_use$BsmtCond)
#NEW CHECK MISSING PLOT
missing_df <- data.frame(colname = names(data_use),colSums_missing=colSums(is.na(data_use)))
plot_missing = missing_df %>% filter(colSums_missing!=0) %>% arrange(desc(colSums_missing))
ggplot(plot_missing, aes(x = reorder(colname,colSums_missing), y = colSums_missing)) +
geom_col(aes(fill = colname), width = 0.7) +
coord_flip() +
theme_classic() +
theme(legend.position = "none") +
xlab("") +
ylab("Number of Missing Observations")
#LotFrontage
#related to lotarea
#LotArea
#LotShape
#LotConfig
lotdata = data_use %>% select(LotFrontage,LotArea,LotShape,LotConfig)
test = lotdata %>% filter(!is.na(LotFrontage))
ggplot(test, aes(x=LotArea, y=LotFrontage,group=LotShape)) +
geom_point(aes(color=LotShape)) +
xlab('Lot Area') +
ylab('Lot Frontage') +
theme_bw()
model = lm(LotFrontage ~ LotArea, data = test)
summary(model)
# 44.067376 + 0.002688 * LotArea
ggplot(test, aes(x = LotShape, y = LotFrontage, fill = LotShape)) + geom_boxplot() +
facet_wrap(~ LotConfig, ncol = 5)
#MASVNR imputation
#mode imputation
data_use$MasVnrType.impute <- Hmisc::impute(data_use$MasVnrType, "random")
data_use$MasVnrArea.impute <- Hmisc::impute(data_use$MasVnrArea, median)
data_use$MasVnrType <- NULL
data_use$MasVnrArea <- NULL
data_use$MasVnrType <- data_use$MasVnrType.impute
data_use$MasVnrArea <- data_use$MasVnrArea.impute
data_use$MasVnrArea <- ifelse(MasVnrType=='None',0,data_use$MasVnrArea )
#Electrical - randomly assign missing Electrical value based on distribution
electric_summ = data_use %>%
filter(!is.na(Electrical)) %>%
mutate(count=1) %>%
group_by(Electrical) %>%
summarise(tot_count=sum(count))
#mode imputation
data_use$Electrical.impute <- Hmisc::impute(data_use$Electrical, mode)
data_use$Electrical <- NULL
data_use$Electrical <- data_use$Electrical.impute
#TotalPorchSF - total porch square footage
data_use$TotalPorchSF <- data_use$WoodDeckSF +data_use$OpenPorchSF + data_use$EnclosedPorch + data_use$X3SsnPorch + data_use$ScreenPorch
data_use$WoodDeckSF <- NULL
data_use$OpenPorchSF <- NULL
data_use$EnclosedPorch <- NULL
data_use$X3SsnPorch <- NULL
data_use$ScreenPorch <- NULL
#CentralAir_flag as a binary variable
data_use$CentralAir_flag <- ifelse(data_use$CentralAir=="Y",1,0)
data_use$CentralAir <- NULL
data_use$LogSalePrice <- log(data_use$SalePrice)
############################################################################################################
#DATA EXPLORATION
plot(data_use)
numeric_data = data_use %>% select(
LotFrontage, MasVnrArea,
LotArea, BsmtFinSF2, BsmtUnfSF, TotalBsmtSF, X1stFlrSF, X2ndFlrSF, LowQualFinSF, GrLivArea,
BsmtFullBath, BsmtHalfBath, FullBath, HalfBath, BedroomAbvGr, KitchenAbvGr, TotRmsAbvGrd, Fireplaces,
GarageCars, GarageArea, TotalPorchSF, PoolArea, MiscVal)
cc = cor(numeric_data, method = "spearman")
corrplot(cc, tl.col = "black", order = "hclust", hclust.method = "average",addrect = 1, tl.cex = 0.5)
############################################################################################################
#DATA EXPLORATION
plot(data_use)
numeric_data = data_use %>% select(
LotFrontage, MasVnrArea,
LotArea, BsmtFinSF2, BsmtUnfSF, TotalBsmtSF, X1stFlrSF, X2ndFlrSF, LowQualFinSF, GrLivArea,
BsmtFullBath, BsmtHalfBath, FullBath, HalfBath, BedroomAbvGr, KitchenAbvGr, TotRmsAbvGrd, Fireplaces,
GarageCars, GarageArea, TotalPorchSF, PoolArea, MiscVal)
cc = cor(numeric_data, method = "spearman")
corrplot(cc, tl.col = "black", order = "hclust", hclust.method = "average",addrect = 1, tl.cex = 0.5)
ggplot(data_use, aes(x=YearRemodAdd, y=SalePrice)) +
geom_line() +
xlab("Time") +
ylab("SalePrice") +
theme_bw() +
geom_smooth()
ggplot(data_use, aes(x=YearBuilt, y=SalePrice)) +
geom_line() +
xlab("Time") +
ylab("SalePrice") +
theme_bw() +
geom_smooth()
library(caret)
library(ggplot2)
library(dplyr)
library(corrplot)
library(Hmisc)
library(kknn)
library(car)
library(glmnet)
library(tree)
library(randomForest)
#simple linear model
num_columns = c('LotFrontage', 'MasVnrArea', 'LotArea', 'BsmtFinSF2', 'BsmtUnfSF', 'TotalBsmtSF',
'X1stFlrSF', 'X2ndFlrSF', 'LowQualFinSF', 'GrLivArea', 'BsmtFullBath', 'BsmtHalfBath',
'FullBath', 'HalfBath', 'BedroomAbvGr', 'KitchenAbvGr', 'TotRmsAbvGrd', 'Fireplaces',
'GarageCars', 'GarageArea', 'TotalPorchSF', 'PoolArea', 'MiscVal','SalePrice')
full_linear_model = lm(SalePrice  ~ ., data_use[num_columns])
summary(full_linear_model)
library(car)
summary(full_linear_model)
vif(full_linear_model)
library(car)
vif(full_linear_model)
avPlots(full_linear_model)
warnings()
#NEW CHECK MISSING PLOT
missing_df <- data.frame(colname = names(data_use),colSums_missing=colSums(is.na(data_use)))
plot_missing = missing_df %>% filter(colSums_missing!=0) %>% arrange(desc(colSums_missing))
ggplot(plot_missing, aes(x = reorder(colname,colSums_missing), y = colSums_missing)) +
geom_col(aes(fill = colname), width = 0.7) +
coord_flip() +
theme_classic() +
theme(legend.position = "none") +
xlab("") +
ylab("Number of Missing Observations")
#LotFrontage imputation - TEMPORARY
data_use$LotFrontage.impute <- ifelse(is.na(data_use$LotFrontage),
round(44.067376+0.002688*data_use$LotArea,0),data_use$LotFrontage)
data_use$LotFrontage <- NULL
data_use$LotFrontage <- data_use$LotFrontage.impute
#NEW CHECK MISSING PLOT
missing_df <- data.frame(colname = names(data_use),colSums_missing=colSums(is.na(data_use)))
plot_missing = missing_df %>% filter(colSums_missing!=0) %>% arrange(desc(colSums_missing))
ggplot(plot_missing, aes(x = reorder(colname,colSums_missing), y = colSums_missing)) +
geom_col(aes(fill = colname), width = 0.7) +
coord_flip() +
theme_classic() +
theme(legend.position = "none") +
xlab("") +
ylab("Number of Missing Observations")
#LotFrontage
#related to lotarea
#LotArea
#LotShape
#LotConfig
lotdata = data_use %>% select(LotFrontage,LotArea,LotShape,LotConfig)
test = lotdata %>% filter(!is.na(LotFrontage))
ggplot(test, aes(x=LotArea, y=LotFrontage,group=LotShape)) +
geom_point(aes(color=LotShape)) +
xlab('Lot Area') +
ylab('Lot Frontage') +
theme_bw()
model = lm(LotFrontage ~ LotArea, data = test)
summary(model)
# 44.067376 + 0.002688 * LotArea
ggplot(test, aes(x = LotShape, y = LotFrontage, fill = LotShape)) + geom_boxplot() +
facet_wrap(~ LotConfig, ncol = 5)
#MASVNR imputation
#mode imputation
data_use$MasVnrType.impute <- Hmisc::impute(data_use$MasVnrType, "random")
glog <- ggplot(data_use, aes(x=log(SalePrice))) +
geom_histogram(bins=200, fill="#66ffcc") +
xlab('Log of Sale Price') +
ylab('') +
theme_classic() +
stat_function(fun=dnorm,
color="black",
args=list(mean=mean(log(data_use$SalePrice)),
sd=sd(log(data_use$SalePrice))))
glog
#simple linear model
num_columns = c('LotFrontage', 'MasVnrArea', 'LotArea', 'BsmtFinSF2', 'BsmtUnfSF', 'TotalBsmtSF',
'X1stFlrSF', 'X2ndFlrSF', 'LowQualFinSF', 'GrLivArea', 'BsmtFullBath', 'BsmtHalfBath',
'FullBath', 'HalfBath', 'BedroomAbvGr', 'KitchenAbvGr', 'TotRmsAbvGrd', 'Fireplaces',
'GarageCars', 'GarageArea', 'TotalPorchSF', 'PoolArea', 'MiscVal','SalePrice')
full_linear_model = lm(SalePrice  ~ ., data_use[num_columns])
vif(full_linear_model)
#Tree
tree.one = tree(LogSalePrice ~ . , data = data_use[num_columns])
summary(tree.one)
